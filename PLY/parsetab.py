
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN DIVIDE ID INPUT_FUNC LPAREN MINUS NUMBER PLUS PRINT_FUNC RPAREN STRING TIMES VAR_NAMEexpression : expression PLUS expression\n                              | expression MINUS expression\n                              | expression TIMES expression\n                              | expression DIVIDE expressionexpression : NUMBER LPAREN expression RPARENexpression : LPAREN expression RPARENexpression : MINUS expressionexpression : NUMBERexpression : STRINGexpression : VAR_NAME ASSIGN expressionexpression : VAR_NAMEexpression : PRINT_FUNC ASSIGN expressionexpression : VAR_NAME ASSIGN INPUT_FUNC'
    
_lr_action_items = {'NUMBER':([0,2,4,8,9,10,11,13,15,16,],[3,3,3,3,3,3,3,3,3,3,]),'LPAREN':([0,2,3,4,8,9,10,11,13,15,16,],[4,4,13,4,4,4,4,4,4,4,4,]),'MINUS':([0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,],[2,9,2,-8,2,-9,-11,2,2,2,2,9,2,9,2,2,9,9,9,9,9,-6,9,-13,9,-5,]),'STRING':([0,2,4,8,9,10,11,13,15,16,],[5,5,5,5,5,5,5,5,5,5,]),'VAR_NAME':([0,2,4,8,9,10,11,13,15,16,],[6,6,6,6,6,6,6,6,6,6,]),'PRINT_FUNC':([0,2,4,8,9,10,11,13,15,16,],[7,7,7,7,7,7,7,7,7,7,]),'$end':([1,3,5,6,12,17,18,19,20,22,23,24,25,26,],[0,-8,-9,-11,-7,-1,-2,-3,-4,-6,-10,-13,-12,-5,]),'PLUS':([1,3,5,6,12,14,17,18,19,20,21,22,23,24,25,26,],[8,-8,-9,-11,8,8,8,8,8,8,8,-6,8,-13,8,-5,]),'TIMES':([1,3,5,6,12,14,17,18,19,20,21,22,23,24,25,26,],[10,-8,-9,-11,10,10,10,10,10,10,10,-6,10,-13,10,-5,]),'DIVIDE':([1,3,5,6,12,14,17,18,19,20,21,22,23,24,25,26,],[11,-8,-9,-11,11,11,11,11,11,11,11,-6,11,-13,11,-5,]),'RPAREN':([3,5,6,12,14,17,18,19,20,21,22,23,24,25,26,],[-8,-9,-11,-7,22,-1,-2,-3,-4,26,-6,-10,-13,-12,-5,]),'ASSIGN':([6,7,],[15,16,]),'INPUT_FUNC':([15,],[24,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,4,8,9,10,11,13,15,16,],[1,12,14,17,18,19,20,21,23,25,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',8),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',9),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',10),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',11),
  ('expression -> NUMBER LPAREN expression RPAREN','expression',4,'p_multiply_number_expression','parser.py',23),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',28),
  ('expression -> MINUS expression','expression',2,'p_negagive_number','parser.py',33),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',39),
  ('expression -> STRING','expression',1,'p_string','parser.py',45),
  ('expression -> VAR_NAME ASSIGN expression','expression',3,'p_assignment','parser.py',51),
  ('expression -> VAR_NAME','expression',1,'p_variable_reference','parser.py',58),
  ('expression -> PRINT_FUNC ASSIGN expression','expression',3,'p_print_function','parser.py',63),
  ('expression -> VAR_NAME ASSIGN INPUT_FUNC','expression',3,'p_input_function','parser.py',68),
]
